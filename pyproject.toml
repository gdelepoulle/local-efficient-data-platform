[tool.poetry]
name = "local-efficient-data-platform"
version = "0.1.0"
description = "A data platform running with the less infrastructure as possible."
authors = ["Guillaume Delepoulle <guillaume.delepoulle@sicara.com>"]

[tool.poetry.dependencies]
python = "3.11.6"
duckdb = "^0.10.0"
dlt = "^0.4.6"
pandas = "^2.2.1"
streamlit = "^1.32.0"
types-requests = "^2.31.0.20240310"

[tool.poetry.group.dev.dependencies]
mypy = "^1.2"
pre-commit = "^2"
pytest = "^7"
pytest-cov = "^3"
ruff = "^0.1.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Packages configs

## coverage

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_empty = true
omit = [
    "src/constants.py",
]
exclude_also = [
    # Such code branches cannot be easily tested; that's OK since they should only contain 1 function call
    "if __name__ == \"__main__\":",
]
fail_under = 70.00
precision = 2

## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py311'

# See all rules at https://docs.astral.sh/ruff/rules/
select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "FBT001", # flake8-boolean-trap
]

ignore = [
    "E501", # "Line too long"
    # -> line length already regulated by the formatter
    "PT011", # "pytest.raises() should specify expected exception"
    # -> would imply to update tests every time you update exception message
    "SIM102", # "Use a single `if` statement instead of nested `if` statements"
    # -> too restrictive,
    "D100", # "Missing docstring in public module"
    "D101", # "Missing docstring in public class"
    "D102", # "Missing docstring in public method"
    "D103", # "Missing docstring in public function"
    "D104", # "Missing docstring in public package"
]

[tool.ruff.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation

[tool.ruff.per-file-ignores]
# Allow missing docstrings for tests
"tests/**/*.py" = ["D1"]

## mypy

[tool.mypy]
python_version = "3.11"
# Enable all optional error checking flags, providing stricter type checking; see https://mypy.readthedocs.io/en/stable/getting_started.html#strict-mode-and-configuration
strict = true

# Type-check the interiors of functions without type annotations; if missing, mypy won't check function bodies without type hints, for instance those coming from third-party libraries
check_untyped_defs = true

# Make __init__.py file optional for package definitions; if missing, mypy requires __init__.py at packages roots, see https://mypy.readthedocs.io/en/stable/running_mypy.html#mapping-file-paths-to-modules
explicit_package_bases = true


[[tool.mypy.overrides]]
module = [
# Ignore missing library stubs for the following packages;
# see https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-library-stubs-or-py-typed-marker
# and https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
]
ignore_missing_imports = true
